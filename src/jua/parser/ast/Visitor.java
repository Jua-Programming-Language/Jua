package jua.parser.ast;

public interface Visitor {

    void visitAdd(AddExpression expression);
    void visitAnd(AndExpression expression);
    void visitArrayAccess(ArrayAccessExpression expression);
    void visitArray(ArrayExpression expression);
    void visitAssignAdd(AssignAddExpression expression);
    void visitAssignBitAnd(AssignBitAndExpression expression);
    void visitAssignBitOr(AssignBitOrExpression expression);
    void visitAssignBitXor(AssignBitXorExpression expression);
    void visitAssignDivide(AssignDivideExpression expression);
    void visitAssignLeftShift(AssignLeftShiftExpression expression);
    void visitAssign(AssignExpression expression);
    void visitAssignMultiply(AssignMultiplyExpression expression);
    void visitAssignNullCoalesce(AssignNullCoalesceExpression expression);
    void visitAssignRemainder(AssignRemainderExpression expression);
    void visitAssignRightShift(AssignRightShiftExpression expression);
    void visitAssignSubtract(AssignSubtractExpression expression);
    void visitBitAnd(BitAndExpression expression);
    void visitBitNot(BitNotExpression expression);
    void visitBitOr(BitOrExpression expression);
    void visitBitXor(BitXorExpression expression);
    void visitBlock(BlockStatement statement);
    void visitBreak(BreakStatement statement);
    void visitCase(CaseStatement statement);
    void visitClone(CloneExpression expression);
    void visitConstantDeclare(ConstantDeclareStatement statement);
    void visitContinue(ContinueStatement statement);
    void visitDivide(DivideExpression expression);
    void visitDo(DoStatement statement);
    void visitEqual(EqualExpression expression);
    void visitFallthrough(FallthroughStatement statement);
    void visitFalse(FalseExpression expression);
    void visitFloat(FloatExpression expression);
    void visitFor(ForStatement statement);
    void visitFunctionCall(FunctionCallExpression expression);
    void visitFunctionDefine(FunctionDefineStatement statement);
    void visitGreaterEqual(GreaterEqualExpression expression);
    void visitGreater(GreaterExpression expression);
    void visitIf(IfStatement statement);
    void visitInt(IntExpression expression);
    void visitLeftShift(LeftShiftExpression expression);
    void visitLessEqual(LessEqualExpression expression);
    void visitLess(LessExpression expression);
    void visitMultiply(MultiplyExpression expression);
    void visitNegative(NegativeExpression expression);
    void visitNotEqual(NotEqualExpression expression);
    void visitNot(NotExpression expression);
    void visitNullCoalesce(NullCoalesceExpression expression);
    void visitNull(NullExpression expression);
    void visitOr(OrExpression expression);
    void visitParens(ParensExpression expression);
    void visitPositive(PositiveExpression expression);
    void visitPostDecrement(PostDecrementExpression expression);
    void visitPostIncrement(PostIncrementExpression expression);
    void visitPreDecrement(PreDecrementExpression expression);
    void visitPreIncrement(PreIncrementExpression expression);
    void visitPrintln(PrintlnStatement statement);
    void visitPrint(PrintStatement statement);
    void visitRemainder(RemainderExpression expression);
    void visitReturn(ReturnStatement statement);
    void visitRightShift(RightShiftExpression expression);
    void visitString(StringExpression expression);
    void visitSubtract(SubtractExpression expression);
    void visitSwitch(SwitchStatement statement);
    void visitTernary(TernaryExpression expression);
    void visitTrue(TrueExpression expression);
    void visitVariable(VariableExpression expression);
    void visitWhile(WhileStatement statement);
}
